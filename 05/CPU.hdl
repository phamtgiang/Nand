// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not      (in = instruction[15], out = Ainstruction);
    Not      (in = Ainstruction, out = Cinstruction);
    Mux16    (a  = instruction, b = ALUout, sel = Cinstruction, out = ARegbefore);
    And      (a  = instruction[5], b = Cinstruction, out = d1);                              
    Or       (a  = d1, b = Ainstruction, out = storeAReg);
    ARegister(in = ARegbefore, load = storeAReg, out = A, out[0..14] = addressM);

    Mux16    (a  = A, b = inM, sel = instruction[12], out = MOrA);                     
    And      (a  = instruction[4], b = Cinstruction, out = d2);                              
    DRegister(in = ALUout, load = d2, out = D);

    ALU      (x  = D, y = MOrA, zx = instruction[11], nx = instruction[10], zy = instruction[9],
              ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, out = outM, zr = zr, ng = ng);
    And      (a  = instruction[3], b = Cinstruction, out = writeM);                           

    Not      (in = zr, out = Notzr);
    Not      (in = ng, out = Notng);
    And      (a  = Notzr, b = Notng, out = pos);
    And      (a  = instruction[2], b = ng, out = Jneg);
    And      (a  = instruction[1], b = zr, out = Jzer);
    And      (a  = instruction[0], b = pos, out = Jpos);
    Or       (a  = Jneg, b = Jzer, out = Jzerneg);
    Or       (a  = Jzerneg, b = Jpos, out = JumpIfCinstuction);
    And      (a  = JumpIfCinstruction, b = Cinstruction, out = Jump);

    PC       (in = A, load = Jump, inc = true, reset = reset, out[0..14] = pc);
}